# Decoding variable precision extensions accessed through the ROCC interface
#
# Copyright (c) 2020-2020 Frédéric Pétrot 
# 
# This program is free software; you can redistribute it and/or modify it
# under the terms and conditions of the GNU General Public License,
# version 2 or later, as published by the Free Software Foundation.
# 
# This program is distributed in the hope it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
# 
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#
# https://qemu.weilnetz.de/doc/devel/decodetree.html


# TODO : Remove
##########################################################################################
# Rocc register numbers: (beware, syntax is lsb:length)
%rgs2     20:5
%rgs1     15:5
%rgd      7:5

# Rocc immediates:
%rtimm    15:10
%rfimm    15:5
%rfimx    20:5
#
# Rocc argument sets:
&rr   rgd rgs1 rgs2
&rt   imm rgd
&rf   imm rgs2 rgd
&rx   imm rgs1 rgd


# Rocc formats:
@rr       .......   ..... ..... ... ..... ....... &rr                %rgs2 %rgs1 %rgd
# @rt       .......   ..........  ... ..... ....... &rt     imm=%rtimm             %rgd
# @rf       .......   ..... ..... ... ..... ....... &rf     imm=%rfimm %rgs2       %rgd
@rx       .......   ..... ..... ... ..... ....... &rx     imm=%rfimx       %rgs1 %rgd
#########################################################################################


#############################################
# Arbitrary Precision Floating Point 64-bit #
#############################################

# *** VP load and store the precision
lpre      0000110 ..... ..... 100 ..... 0001111 @rx
spre      0011001 ..... ..... 010 ..... 0001111 @rx

# *** VP load and store rounding mode
lrnd      0001000 ..... ..... 100 ..... 0001111 @rx
srnd      0011011 ..... ..... 010 ..... 0001111 @rx

# *** VP load and store arbitrary precision registers
flp           ............   ..... 101 ..... 0000111 @i
fsp           ....... .....  ..... 101 ..... 0100111 @s

# *** VP arithmetic operations
fadd_p        0000011 ..... ..... ... ..... 0001011 @r_rm
fsub_p        0000111 ..... ..... ... ..... 0001011 @r_rm
fmul_p        0001011 ..... ..... ... ..... 0001011 @r_rm
fdiv_p        0001111 ..... ..... ... ..... 0001011 @r_rm
fsqrt_p       0101111 00000 ..... ... ..... 0001011 @r2_rm
feq_p         1010011 ..... ..... 010 ..... 0001011 @r
flt_p         1010011 ..... ..... 001 ..... 0001011 @r
fle_p         1010011 ..... ..... 000 ..... 0001011 @r
fmin_p        0010111 ..... ..... 000 ..... 0001011 @r
fmax_p        0010111 ..... ..... 001 ..... 0001011 @r
fsgnj_p       0010011 ..... ..... 000 ..... 0001011 @r
fsgnjn_p      0010011 ..... ..... 001 ..... 0001011 @r
fsgnjx_p      0010011 ..... ..... 010 ..... 0001011 @r
fmadd_p       ..... 00 ..... ..... ... ..... 0001011 @r4_rm
fmsub_p       ..... 01 ..... ..... ... ..... 0001011 @r4_rm

# *** VP conversions
# Conversion gpr into mpfr
fcvt_vp_d     1100011 00001 ..... ... ..... 0001011 @r2_rm

# Conversion fpr into mpfr
fcvt_vp_dfpr  1100011 00010 ..... ... ..... 0001011 @r2_rm

# Conversion mpfr into gpr
fcvt_d_vp     1100011 00011 ..... ... ..... 0001011 @r2_rm

# Conversion mpfr into fpr
fcvt_dfpr_vp  1100011 00100 ..... ... ..... 0001011 @r2_rm



# TODO : Clean and Remove
#############################################################################
## *** Variable precision environment setting instruction ***
## Please Andrea enlight me, I don't get why we have that many insns
## Note also that the doc is incoherent => Xs1 appears on the register drawing
## while Xs2 appears on the text. I assume Xs2 which is riscv-consistent


# *** VP load and stores
ldu           0000010 ..... ..... 010 ..... 0001111 @rr
#################################################################################
